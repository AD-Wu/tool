# ====================== 英文本地字符串配置 ========================
# 公共类库信息
commons.pool.type=type can not be null
commons.pool.type.invalid=type \"{0}\" can not be accepted
commons.pool.name=poolName can not be null
commons.pool.name.invalid=database pool \"{0}\" invalid!
commons.pool.conn=connectionString can not be null
commons.pool.user=user can not be null
commons.pool.status=DB pool \"{0}\" active connections: {1}, free connections: {2}.
commons.pool.started=database connection pool \"{0}\" has been started, you can not repeat the start
commons.system.status=System runtime information, cpu: {0} core; max memory: {1} M; total memory: {2} M; free memory: {3} M; total threads: {4}
commons.xml.load=Load XML file \"{0}\" error: {1}
commons.zip.file.zip=Compress (zip) file \"{0}\" to \"{1}\" error: {2}
commons.zip.file.unzip=Decompress (unzip) file \"{0}\" to \"{1}\" error: {2}
commons.redis.name=Redis \"name\" can not null
commons.redis.host=Redis \"host\" can not null
commons.redis.port=Redis \"port\":{0} is invalid
commons.redis.status=Redis pool active:{0},idle:{1},wait:{2}
# 接口层信息
protocol.config.load=Failed to load configure file \"{0}\"!
protocol.config.save=Failed to save configure file \"{0}\"!
protocol.service.start.err=Start protocol service \"{0}\" failed!
# --- NETWORK ---
protocol.service.err=network service runtime error: {0}
protocol.concent.err=close concent error: {0}
protocol.concent.timeout=concent timeout
protocol.concent.read.err=read concent data error: {0}
protocol.concent.start.err=concent start failed: {0}
protocol.concent.stop.err=concent stop error: {0}
protocol.time.changed=system time has changed, from previous time \"{0}\" to now time \"{1}\", service will automatically adjust the timeout
protocol.network.running=network monitor is running, total concents: {0}
protocol.network.err=network monitor runtime error: {0}
protocol.http.start.err=start TOMCAT error: {0}
protocol.http.stop.err=stop TOMCAT error: {0}
protocol.http.send.err=send HTTP data error: {0}
protocol.http.rejects=Server rejects the HTTP request, please confirm whether it is frequently requested data
protocol.http.close.err=close HTTP client error: {0}
protocol.http.client.err=start HTTP client \"{0}\" error: {1}
protocol.ws.text.err=send WEBSOCKET text error: {0}
protocol.ws.byte.err=send WEBSOCKET ByteBuffer error: {0}
protocol.ws.flush.err=flush WEBSOCKET data error: {0}
protocol.ws.close=server close the WEBSOCKET connection
protocol.ws.close.err=close WEBSOCKET connection error: {0}
protocol.ws.rejects=server rejects the WEBSOCKET connection
protocol.wsc.err=WEBSOKCET client runtime error: {0}
protocol.wsc.text.err=send WEBSOCKET client text error: {0}
protocol.wsc.byte.err=send WEBSOCKET client ByteBuffer error: {0}
protocol.wsc.flush.err=flush WEBSOCKET client data error: {0}
protocol.wsc.close.err=close WEBSOCKET client connection error: {0}
protocol.serial.available=get SERIAL available error: {0}
protocol.serial.read.byte=read SERIAL byte error: {0}
protocol.serial.read.bytes=read SERIAL bytes error: {0}
protocol.serial.reset=reset SERIAL input stream error: {0}
protocol.serial.send.byte=send SERIAL bytes error: {0}
protocol.serial.flush=flush SERIAL data error: {0}
protocol.serial.start=start serial client \"{0}\" error: name \"{1}\" invalid
protocol.serial.start.err=start serial client \"{0}\" error(port \"{1}\"): {2}
protocol.socket.available=get SOCKET available error: {0}
protocol.socket.read.byte=read SOCKET byte error: {0}
protocol.socket.read.bytes=read SOCKET bytes error: {0}
protocol.socket.reset=reset SOCKET input stream error: {0}
protocol.socket.send.byte=send SOCKET bytes error: {0}
protocol.socket.flush=flush SOCKET data error: {0}
protocol.socket.start=start socket service error: port \"{0}\" invalid
protocol.socket.start.err=start socket service error[HOST: {0}, PORT: {1}]: {2}
protocol.socket.conn.err=start socket service connection error: {0}
protocol.socket.client.host=start socket client \"{0}\" error: host \"{1}\" invalid
protocol.socket.client.port=start socket client \"{0}\" error: port \"{1}\" invalid
protocol.socket.client.start=start socket client \"{0}\" error: {1}
protocol.custom.start=create custom service failed: class \"{0}\" invalid, error: {1}
protocol.custom.start.err=start custom service failed: class \"{0}\", error: {1}
protocol.custom.stop.err=stop custom service failed: class \"{0}\", error: {1}
protocol.custom.client=start custom client failed: class \"{0}\", error: {1}
protocol.custom.available=get CUSTOM available error: {0}
protocol.custom.read=read CUSTOM data error: {0}
protocol.custom.reset=reset CUSTOM data error: {0}
protocol.custom.send=send CUSTOM data error: {0}
protocol.custom.flush=flush CUSTOM data error: {0}
# --- LAYER ---
protocol.layer.annotation.err=Annotation \"{0}\" field can not be empty, class: \"{1}\", annotation: \"{2}\"!
protocol.layer.login=Remote conncetion \"{0}\" is not logged in, the request is abandoned: command[{1}], version[{2}]!
protocol.layer.login.err=Login required
protocol.layer.config=Remote \"{0}\" request data not been configured: command[{1}], version[{2}]!
protocol.layer.config.err=Request command not been configured
protocol.layer.data.err=Data invalid
protocol.layer.actor.err=Remote \"{0}\" request exception: {1}, command[{2}], version[{3}]
protocol.layer.response=To remote response data not been configured: command[{0}], version[{1}], data: {2}
protocol.layer.response.err=Remote response data not been configured: command[{0}], version[{1}]!
protocol.layer.request=To remote request data not been configured: command[{0}], version[{1}]!
protocol.layer.callback=Execute \"{0}\" runtime error: command[{1}], version[{2}], message: {3}
protocol.layer.serializer=Serializer \"{0}\" do \"{1}\" data \"{2}\" error: {3}
protocol.layer.method.err=Process {0}.{1}() method error in protocol service \"{2}\": {3}
protocol.layer.monitor=Protocol monitor runtime error: {0}
protocol.layer.serializer.multi=Service config \"multiSerializer\" is disabled!
protocol.layer.session.timout=session timeout
protocol.layer.session.logout=session logout
protocol.layer.channel.started=Protocol service channel \"{0}\" started[{1}]
protocol.layer.channel.stopped=Protocol service channel \"{0}\" stopped
protocol.layer.channel.err=Service channel \"{0}\" error: {1}
protocol.layer.channel.msg=Service channel \"{0}\" message: {1}
protocol.layer.channel.start=Strat service channel \"{0}\" failed!
protocol.layer.channel.service=Strat service channel \"{0}\" error!
protocol.layer.channel.logout=remote automatic closed
protocol.layer.channel.close=Session manager scheduled to close connection \"{0}\": {1}
protocol.layer.security.remote=Remote \"{0}\" connected. BUT Security check fails, the connection to be abandoned!
protocol.layer.security.client=Client \"{0}\" connected. BUT Security check fails, the connection to be abandoned!
protocol.layer.responser.err=Callback to responser error!
protocol.layer.reader.err=reader \"{0}\" coding error, call nextPackage() exceeds the maximum number 100!!!!!!!!!
protocol.layer.reader.data=Process remote \"{0}\" data error: {1}
protocol.layer.sender.data=Send data to \"{0}\" error: {1}
protocol.layer.client.connect=Trying connect client \"{0}\"...
protocol.layer.client.connected=Client \"({0}){1}\": connected, total clients: {2}
protocol.layer.client.disconnect=Client \"({0}){1}\": disconnected, total clients: {2}
protocol.layer.client.failed=Failed to connect client \"{0}\": {1}
protocol.layer.client.err=Client \"({0}){1}\" error: {2}
protocol.layer.client.msg=Client \"({0}){1}\" message: {2}
protocol.layer.statistics=Service channel \"{0}\" runtime statistics, clients: {1}, remotes: {2}, total: {3}, sessions: {4}
protocol.layer.concent.limit=Exceeds the maximum number({0}/{1}) of connections, the remote connection \"{2}\" to be abandoned!
protocol.layer.remote.connect=Remote \"{0}\": connected, total remotes: {1}
protocol.layer.remote.disconnect=Remote \"{0}\": disconnected, total remotes: {1}
protocol.layer.remote.err=Remote \"{0}\" error: {1}
protocol.layer.remote.msg=Remote \"{0}\" message: {1}
protocol.layer.service.err=Service \"{0}\" error: {1}
protocol.layer.service.started=Service \"{0}\" starts successfully
protocol.layer.service.stopped=Service \"{0}\" stopped
protocol.layer.service.allstarted=All services starts successfully
protocol.layer.service.allstopped=All services stopped
# 框架层信息
framework.init=Initialize framework, system timezone: \"{0}\", current timezone: \"{1}\", system language: \"{2}\", current language: \"{3}\"
framework.db.add.err=Add database data \"{0}\" error!
framework.db.delete.err=Delete database data \"{0}\" error!
framework.db.edit.err=Edit database data \"{0}\" error!
framework.db.bean.err=Retrieve database data \"{0}\" error!
framework.db.count.err=Retrieve database count \"{0}\" error!
framework.db.list.err=Retrieve database data list \"{0}\" error!
framework.db.page.err=Retrieve database data page \"{0}\" error!
framework.db.update.err=Update database data \"{0}\" error!
framework.db.start.err=Start database pool \"{0}\" error!
framework.actor.license=Request data invalid or access prohibited
framework.actor.method.err=Method name \"{0}\" do not exist in data configure or method definition error, command[{1}], version[{1}]!
framework.actor.err=Data does no exist or data service is not started
framework.actor.type=actor \"{0}\" constructed without actual type information!
framework.listener.type=event listener \"{0}\" constructed without actual type information!
# 通用信息
global.response.err=Operation failed











